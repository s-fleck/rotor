% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rotate.R, R/rotate_date.R, R/rotate_time.R
\name{rotate}
\alias{rotate}
\alias{backup}
\alias{rotate_date}
\alias{backup_date}
\alias{rotate_time}
\alias{backup_time}
\title{Rotate or backup files}
\usage{
rotate(file, size = 0, max_backups = Inf, compression = FALSE,
  create_file = TRUE, dry_run = getOption("rotor.dry_run", FALSE),
  verbose = getOption("rotor.dry_run", dry_run))

backup(file, size = 0, max_backups = Inf, compression = FALSE,
  dry_run = getOption("rotor.dry_run", FALSE),
  verbose = getOption("rotor.dry_run", dry_run))

rotate_date(file, age = NULL, format = "\%Y-\%m-\%d", size = 1,
  max_backups = Inf, compression = FALSE, overwrite = FALSE,
  create_file = TRUE, now = Sys.Date(),
  dry_run = getOption("rotor.dry_run", FALSE),
  verbose = getOption("rotor.dry_run", dry_run))

backup_date(file, age = NULL, format = "\%Y-\%m-\%d", size = 1,
  max_backups = Inf, compression = FALSE, overwrite = FALSE,
  now = Sys.Date(), dry_run = getOption("rotor.dry_run", FALSE),
  verbose = getOption("rotor.dry_run", dry_run))

rotate_time(file, age = NULL, format = "\%Y-\%m-\%d--\%H-\%M-\%S",
  size = 1, max_backups = Inf, compression = FALSE,
  overwrite = FALSE, create_file = TRUE, now = Sys.time(),
  dry_run = getOption("rotor.dry_run", FALSE),
  verbose = getOption("rotor.dry_run", dry_run))

backup_time(file, age = NULL, format = "\%Y-\%m-\%d--\%H-\%M-\%S",
  size = 1, max_backups = Inf, compression = FALSE,
  overwrite = FALSE, now = Sys.time(),
  dry_run = getOption("rotor.dry_run", FALSE),
  verbose = getOption("rotor.dry_run", dry_run))
}
\arguments{
\item{file}{\code{character} scalar: file to backup/rotate}

\item{size}{scalar \code{integer} or \code{character}. Backup/rotate if \code{file} is
larger than this size. \code{Integers} are interpreted as
bytes. You can pass \code{character} vectors that contain a file size suffix
like \code{1k} (kilobytes), \code{3M} (megabytes), \code{4G} (gigabytes),
\code{5T`` (terabytes). Instead of these short forms you can also be explicit and use the IEC suffixes }KiB\code{, }MiB\code{, }GiB\code{, }TiB\code{. In Both cases }1\code{kilobyte is}1024\code{bytes, 1}megabyte\code{is}1024` kilobytes, etc... .}

\item{max_backups}{maximum number of backups to keep
\itemize{
\item an \code{integer} scalar: Maximum number of backups to keep
}

In addition for timestamped backups the following value are supported:
\itemize{
\item a \code{Date} scalar: Remove all backups before this date
\item a \code{character} scalar representing a Date in ISO format
(e.g. \code{"2019-12-31"})
\item a \code{character} scalar representing an Interval in the form
\code{"<number> <interval>"} (see below for more info)
}}

\item{compression}{Whether or not backups should be compressed
\itemize{
\item \code{FALSE} for uncompressed backups,
\item \code{TRUE} for zip compression; uses \code{\link[=zip]{zip()}}
\item a scalar \code{integer} between \code{1} and \code{9} to specify a compression
level (requires the
\href{https://cran.r-project.org/web/packages/zip/index.html}{zip} package,
see its documentation for details)
\item the \code{character} scalars \code{"base::zip()"} or \code{"zip::zipr"} to force a
specific zip command
}}

\item{create_file}{\code{logical} scalar. If \code{TRUE} create an empty file in
place of \code{file} after rotating.}

\item{dry_run}{\code{logical} scalar. If \code{TRUE} no changes are applied to the
file system (no files are created or deleted)}

\item{verbose}{\code{logical} scalar. If \code{TRUE} additional informative \code{messages}
are printed}

\item{age}{minimum age after which to backup/rotate a file; can be
\itemize{
\item a \code{character} scalar representing an Interval in the form
\code{"<number> <interval>"} (e.g. \code{"2 months"}, see \emph{Intervals} section below).
\item a \code{Date} or a \code{character} scalar representing a Date for
a fixed point in time after which to backup/rotate. See \code{format} for
which Date/Datetime formats are supported by rotor.
}}

\item{format}{a scalar \code{character} that can be a subset of of valid
\code{strftime()} formatting strings. The default setting is
\code{"\%Y-\%m-\%d--\%H-\%M-\%S"}.
\itemize{
\item You can use an arbitrary number of dashes anywhere in the format, so
\code{"\%Y-\%m-\%d--\%H-\%M-\%S"} and \code{"\%Y\%m\%d\%H\%M\%S"} are both legal.
\item \code{T} and \code{_} can also be used as separators. For example, the following
datetime formats are also possible:
\code{\%Y-\%m-\%d_\%H-\%M-\%S} (Python logging default),
\code{\%Y\%m\%dT\%H\%M\%S} \href{https://en.wikipedia.org/wiki/ISO_8601}{ISO 8601}
\item All datetime components except \code{\%Y} are optional. If you leave out part
of the timestamp, the first point in time in the period is assumed. For
example (assuming the current year is 2019) \code{\%Y} is identical to
\code{2019-01-01--00-00-00}.
\item The timestamps must be lexically sortable, so \code{"\%Y-\%m-\%d"} is legal,
\code{"\%m-\%d-\%Y"} and \code{\%Y-\%d} are not.
}}

\item{overwrite}{\code{logical} scalar. If \code{TRUE} overwrite backups if a backup
of the same name (usually due to timestamp collision) exists.}

\item{now}{The current \code{Date} or Time (\code{POSIXct}). You can pass a custom
value here to to override the real system time. This is mainly useful
for testing purposes.}
}
\value{
\code{file} as a \code{character} scalar (invisibly)
}
\description{
Functions starting with \code{backup} create backups of a \code{file}, while functions
starting with \code{rotate} do the same but also replace the original \code{file}
with an empty one (this is useful for log rotation)
}
\section{Side Effects}{

\code{backup()}, \code{backup_date()}, and \code{backup_time()} creates a new file on the
file system (if the specified conditions are met). It may also delete
backups if \code{max_backup} is reached.

\code{rotate()}, \code{rotate_date()} and \code{rotate_time()} does the same, but in
addition replaces the input \code{file} with an empty file (or not if
\code{create_file == FALSE})
}

\section{Intervals}{


In \strong{rotor}, an interval is a character string in the form
\code{"<number> <interval>"}. The following intervals are possible:
\code{"day(s)"}, \code{"week(s)"}, \code{"month(s)"}, \code{"quarter(s)"}, \code{"year(s)"}.
The plural \code{"s"} is optional (so \code{"2 weeks"} and \code{"2 week"} are equivalent).
Please be aware that weeks are
\href{https://en.wikipedia.org/wiki/ISO_week_date}{ISOweeks}
and start on Monday (not Sunday as in some countries).

Interval strings can be used as arguments when backing up or rotating files,
or for pruning backup queues (i.e. limiting the number of backups of a
single) file.

When rotating/backing up \code{"1 months"} means "make a new backup if the last
backup is from the preceding month". E.g if the last backup of \code{myfile}
is from \code{2019-02-01} then \code{backup_time(myfile, age = "1 month")} will only
create a backup if the current date is at least \code{2019-03-01}.

When pruning/limiting backup queues, \code{"1 year"} means "keep at least most
one year worth of backups". So if you call
\code{backup_time(myfile, max_backups = "1 year")} on \code{2019-03-01}, it will create
a backup and then remove all backups of \code{myfile} before \code{2019-01-01}.
}

\seealso{
\code{\link[=n_backups]{n_backups()}}
}
